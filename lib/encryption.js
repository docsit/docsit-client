"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.decryptMultiple=exports.encryptMultiple=exports.generateKey=exports.bufferToHexString=exports.hexStringToBuffer=exports.arrayToUtf8String=exports.utf8StringToArray=void 0;try{if("undefined"!=typeof process&&"node"===process.release.name)// eslint-disable-next-line
var window={crypto:require("@trust/webcrypto")}}catch(a){console.log("Package running on web")}const utf8StringToArray=a=>{if("string"!=typeof a)throw new TypeError("Expected input to be a string");const b=new TextEncoder("utf-8");return b.encode(a)};exports.utf8StringToArray=utf8StringToArray;const arrayToUtf8String=a=>{if(!Array.isArray(a)&&!ArrayBuffer.isView(a))throw new TypeError("Expected input to be array");const b=new TextDecoder("utf-8");return b.decode(a)};exports.arrayToUtf8String=arrayToUtf8String;const hexStringToBuffer=a=>{if("string"!=typeof a)throw new TypeError("Expected input to be a string");if(0!=a.length%2)throw new RangeError("Expected string to be an even number of characters");const b=new Uint8Array(a.length/2);for(let c=0;c<a.length;c+=2)b[c/2]=parseInt(a.substring(c,c+2),16);return b};exports.hexStringToBuffer=hexStringToBuffer;const bufferToHexString=a=>{if(!Array.isArray(a)&&!ArrayBuffer.isView(a))throw new TypeError("Expected input to be array");return a.reduce((a,b)=>a+b.toString(16).padStart(2,"0"),"")};exports.bufferToHexString=bufferToHexString;const generateKey=async(a,b)=>{const c=bufferToHexString(a),d=await window.crypto.subtle.digest({name:"SHA-256"},utf8StringToArray(`${c};${b}`)),e=await window.crypto.subtle.importKey("raw",d,{name:"AES-CBC"},!0,["encrypt","decrypt"]);return e};exports.generateKey=generateKey;const encryptMultiple=async(a,b)=>{const c=window.crypto.getRandomValues(new Uint8Array(16)),d=await generateKey(c,b),e=await Promise.all(a.map(async a=>{const b=await window.crypto.subtle.encrypt({name:"AES-CBC",iv:c},d,utf8StringToArray(a));return bufferToHexString(new Uint8Array(b))}));return{hexMagic:bufferToHexString(c),encryptedArray:e}};exports.encryptMultiple=encryptMultiple;const decryptMultiple=async(a,b,c)=>{const d=hexStringToBuffer(b),e=await generateKey(d,c),f=await Promise.all(a.map(async a=>{try{const b=await window.crypto.subtle.decrypt({name:"AES-CBC",iv:d},e,hexStringToBuffer(a));return arrayToUtf8String(new Uint8Array(b))}catch(a){const b=new Error("Wrong password.");throw b.code="WRONG_PASSWORD",b.orginalError=a,b}}));return f};exports.decryptMultiple=decryptMultiple;
//# sourceMappingURL=encryption.js.map
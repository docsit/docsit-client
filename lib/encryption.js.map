{"version":3,"sources":["../src/encryption.js"],"names":["process","release","name","window","crypto","require","utf8StringToArray","str","TypeError","textEncoder","TextEncoder","encode","arrayToUtf8String","array","Array","isArray","ArrayBuffer","isView","TextDecoder","decode","hexStringToBuffer","hex","length","RangeError","Uint8Array","i","parseInt","substring","bufferToHexString","reduce","accumulated","next","toString","padStart","generateKey","magic","password","hexMagic","saltedPassword","keyBuffer","subtle","digest","cryptoKey","importKey","encryptMultiple","unencryptedArray","getRandomValues","encryptedArray","Promise","all","map","unencryptedText","encryptedBuffer","encrypt","iv","decryptMultiple","decryptedArray","encryptedText","decryptedBuffer","decrypt","err","error","Error","code","orginalError"],"mappings":"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","sourcesContent":["if (typeof process !== 'undefined' && process.release.name === 'node') {\n  // eslint-disable-next-line\n  var window = { crypto: require('@trust/webcrypto') };\n}\n\nexport const utf8StringToArray = str => {\n  if (typeof str !== 'string') throw new TypeError('Expected input to be a string');\n  const textEncoder = new TextEncoder('utf-8');\n  return textEncoder.encode(str);\n};\n\nexport const arrayToUtf8String = array => {\n  if (!Array.isArray(array) && !ArrayBuffer.isView(array))\n    throw new TypeError('Expected input to be array');\n  const textEncoder = new TextDecoder('utf-8');\n  return textEncoder.decode(array);\n};\n\nexport const hexStringToBuffer = hex => {\n  if (typeof hex !== 'string') throw new TypeError('Expected input to be a string');\n  if (hex.length % 2 !== 0)\n    throw new RangeError('Expected string to be an even number of characters');\n\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    array[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n  return array;\n};\n\nexport const bufferToHexString = array => {\n  if (!Array.isArray(array) && !ArrayBuffer.isView(array))\n    throw new TypeError('Expected input to be array');\n  return array.reduce((accumulated, next) => accumulated + next.toString(16).padStart(2, '0'), '');\n};\n\nexport const generateKey = async (magic, password) => {\n  const hexMagic = bufferToHexString(magic);\n  const saltedPassword = `${hexMagic};${password}`;\n  const keyBuffer = await window.crypto.subtle.digest(\n    { name: 'SHA-256' },\n    utf8StringToArray(saltedPassword)\n  ); // TODO: Remove the object for correct web implementation\n  const cryptoKey = await window.crypto.subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CBC' },\n    true,\n    ['encrypt', 'decrypt']\n  );\n  return cryptoKey;\n};\n\nexport const encryptMultiple = async (unencryptedArray, password) => {\n  const magic = window.crypto.getRandomValues(new Uint8Array(16));\n  const cryptoKey = await generateKey(magic, password);\n  const encryptedArray = await Promise.all(\n    unencryptedArray.map(async unencryptedText => {\n      const encryptedBuffer = await window.crypto.subtle.encrypt(\n        { name: 'AES-CBC', iv: magic },\n        cryptoKey,\n        utf8StringToArray(unencryptedText)\n      );\n      return bufferToHexString(new Uint8Array(encryptedBuffer));\n    })\n  );\n  return {\n    hexMagic: bufferToHexString(magic),\n    encryptedArray,\n  };\n};\n\nexport const decryptMultiple = async (encryptedArray, hexMagic, password) => {\n  const magic = hexStringToBuffer(hexMagic);\n  const cryptoKey = await generateKey(magic, password);\n  const decryptedArray = await Promise.all(\n    encryptedArray.map(async encryptedText => {\n      try {\n        const decryptedBuffer = await window.crypto.subtle.decrypt(\n          { name: 'AES-CBC', iv: magic },\n          cryptoKey,\n          hexStringToBuffer(encryptedText)\n        );\n        return arrayToUtf8String(new Uint8Array(decryptedBuffer));\n      } catch (err) {\n        const error = new Error('Wrong password.');\n        error.code = 'WRONG_PASSWORD';\n        error.orginalError = err;\n        throw error;\n      }\n    })\n  );\n  return decryptedArray;\n};\n"],"file":"encryption.js"}
{"version":3,"sources":["../src/encryption.js"],"names":["webCrypto","require","window","crypto","utf8StringToArray","str","TypeError","textEncoder","TextEncoder","encode","hexStringToBuffer","hex","length","RangeError","array","Uint8Array","i","parseInt","substring","bufferToHexString","Array","isArray","ArrayBuffer","isView","reduce","accumulated","next","toString","padStart","generateKey","magic","password","hexMagic","saltedPassword","keyBuffer","subtle","digest","name","cryptoKey","importKey","encryptMultiple","unencryptedArray","getRandomValues","encryptedArray","Promise","all","map","unencryptedText","encryptedBuffer","encrypt","iv","decryptMultiple","decryptedArray","encryptedText","decryptedBuffer","decrypt"],"mappings":"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","sourcesContent":["const webCrypto = require('@trust/webcrypto');\n\nconst window = {\n  crypto: webCrypto,\n};\n\nexport const utf8StringToArray = str => {\n  if (typeof str !== 'string') throw new TypeError('Expected input to be a string');\n  const textEncoder = new TextEncoder('utf-8');\n  return textEncoder.encode(str);\n};\n\nexport const hexStringToBuffer = hex => {\n  if (typeof hex !== 'string') throw new TypeError('Expected input to be a string');\n  if (hex.length % 2 !== 0)\n    throw new RangeError('Expected string to be an even number of characters');\n\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    array[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n  return array;\n};\n\nexport const bufferToHexString = array => {\n  if (!Array.isArray(array) && !ArrayBuffer.isView(array))\n    throw new TypeError('Expected input to be array');\n  return array.reduce((accumulated, next) => accumulated + next.toString(16).padStart(2, '0'), '');\n};\n\nexport const generateKey = async (magic, password) => {\n  const hexMagic = bufferToHexString(magic);\n  const saltedPassword = `${hexMagic};${password}`;\n  const keyBuffer = await window.crypto.subtle.digest(\n    { name: 'SHA-256' },\n    utf8StringToArray(saltedPassword)\n  ); // TODO: Remove the object for correct web implementation\n  const cryptoKey = await window.crypto.subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CBC' },\n    true,\n    ['encrypt', 'decrypt']\n  );\n  return cryptoKey;\n};\n\nexport const encryptMultiple = async (unencryptedArray, password) => {\n  const magic = window.crypto.getRandomValues(new Uint8Array(16));\n  const cryptoKey = await generateKey(magic, password);\n  const encryptedArray = await Promise.all(\n    unencryptedArray.map(async unencryptedText => {\n      const encryptedBuffer = await window.crypto.subtle.encrypt(\n        { name: 'AES-CBC', iv: magic },\n        cryptoKey,\n        utf8StringToArray(unencryptedText)\n      );\n      return bufferToHexString(new Uint8Array(encryptedBuffer));\n    })\n  );\n  return {\n    hexMagic: bufferToHexString(magic),\n    encryptedArray,\n  };\n};\n\nexport const decryptMultiple = async (encryptedArray, hexMagic, password) => {\n  const magic = hexStringToBuffer(hexMagic);\n  const cryptoKey = await generateKey(magic, password);\n  const decryptedArray = await Promise.all(\n    encryptedArray.map(async encryptedText => {\n      const decryptedBuffer = await window.crypto.subtle.decrypt(\n        { name: 'AES-CBC', iv: magic },\n        cryptoKey,\n        utf8StringToArray(encryptedText)\n      );\n      return bufferToHexString(new Uint8Array(decryptedBuffer));\n    })\n  );\n  return decryptedArray;\n};\n"],"file":"encryption.js"}
{"version":3,"sources":["../../src/test/encryption.test.js"],"names":["describe","it","arrayBuffer","to","eql","Uint8Array","ARRAY","hexString","equal","STRING","array","length","i","charCodeAt","string","response","JSON","stringify","hola","BODY","DATA","IPFS_DIRECTORY_HASH","hexMagic","encryptedArray","body","data","ipfsDirectoryHash","err","code"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\n\nimport {\n  hexStringToBuffer,\n  bufferToHexString,\n  utf8StringToArray,\n  arrayToUtf8String,\n  encryptMultiple,\n  decryptMultiple,\n} from '../encryption';\n\ndescribe('Describe encryption module', () => {\n  it('correctly converts an 0 hex string to an array', async () => {\n    const HEX_STRING = '00000000000000000000000000000000';\n    const arrayBuffer = hexStringToBuffer(HEX_STRING);\n    expect(arrayBuffer).to.eql(new Uint8Array(16));\n  });\n\n  it('correctly converts a filled hex string to an array', async () => {\n    const HEX_STRING = 'cbf3ebc2bf3f10480a47bdd51a544d1a';\n    const arrayBuffer = hexStringToBuffer(HEX_STRING);\n    expect(arrayBuffer).to.eql(\n      new Uint8Array([203, 243, 235, 194, 191, 63, 16, 72, 10, 71, 189, 213, 26, 84, 77, 26])\n    );\n  });\n\n  it('correctly converts empty array to hex string', async () => {\n    const ARRAY = new Uint8Array(16);\n    const hexString = bufferToHexString(ARRAY);\n    expect(hexString).to.equal('00000000000000000000000000000000');\n  });\n\n  it('correctly converts a filled array to hex string', async () => {\n    const ARRAY = new Uint8Array([\n      203,\n      243,\n      235,\n      194,\n      191,\n      63,\n      16,\n      72,\n      10,\n      71,\n      189,\n      213,\n      26,\n      84,\n      77,\n      26,\n    ]);\n    const hexString = bufferToHexString(ARRAY);\n    expect(hexString).to.equal('cbf3ebc2bf3f10480a47bdd51a544d1a');\n  });\n\n  it('correctly converts a utf8 string to an array', async () => {\n    const STRING = 'hola:jota';\n    const array = utf8StringToArray(STRING);\n    expect(array.length).to.equal(STRING.length);\n    for (let i = 0; i < STRING.length; i += 1) {\n      expect(array[i]).to.equal(STRING.charCodeAt(i));\n    }\n  });\n\n  it('correctly converts an array to a utf8 string', async () => {\n    const STRING = 'hola:jota';\n    const array = new Uint8Array(STRING.length);\n    for (let i = 0; i < STRING.length; i += 1) {\n      array[i] = STRING.charCodeAt(i);\n    }\n    const string = arrayToUtf8String(array);\n    expect(string).to.equal(STRING);\n  });\n\n  it('correctly decrypts multiple string with the correct password', async () => {\n    const PASSWORD = 'jota, pasame la sal';\n    const HEX_MAGIC = '1fae168d77f474896bae8537257dddfb';\n    const ENCRYPTED_BODY = 'aae515ea4bcfb574a549a5340f23829a';\n    const ENCRYPTED_DATA = 'e5f095d3645fdb68b27952d84b76a6aa';\n    const ENCRYPTED_IPFS_DICRECTORY_HASH =\n      '23388186f1915d1635faa41c4fb255e5512b784bf1fb171dc6497719f4703a22623963fd51c7b743a8a1e2f136c57a34';\n    const response = await decryptMultiple(\n      [ENCRYPTED_BODY, ENCRYPTED_DATA, ENCRYPTED_IPFS_DICRECTORY_HASH],\n      HEX_MAGIC,\n      PASSWORD\n    );\n    expect(response).to.eql([\n      '# Title',\n      JSON.stringify({\n        hola: 'jota',\n      }),\n      'QmT4n2a261NS1ekg6zfxhYGuojCQCkpQGhP8LPSeJkQcXU',\n    ]);\n  });\n\n  it('correctly encrypts and then decrypts multiple strings', async () => {\n    const PASSWORD = 'jota, pasame la sal';\n    const BODY = '# Title';\n    const DATA = JSON.stringify({\n      hola: 'jota',\n    });\n    const IPFS_DIRECTORY_HASH = 'QmT4n2a261NS1ekg6zfxhYGuojCQCkpQGhP8LPSeJkQcXU';\n    const { hexMagic, encryptedArray } = await encryptMultiple(\n      [BODY, DATA, IPFS_DIRECTORY_HASH],\n      PASSWORD\n    );\n    const [body, data, ipfsDirectoryHash] = await decryptMultiple(\n      encryptedArray,\n      hexMagic,\n      PASSWORD\n    );\n    expect(body).to.equal(BODY);\n    expect(data).to.equal(DATA);\n    expect(ipfsDirectoryHash).to.equal(IPFS_DIRECTORY_HASH);\n  });\n\n  it('throws an error if multiple string are decrypted with invalid password', async () => {\n    const BODY = '# Title';\n    const DATA = JSON.stringify({\n      hola: 'jota',\n    });\n    const IPFS_DIRECTORY_HASH = 'QmT4n2a261NS1ekg6zfxhYGuojCQCkpQGhP8LPSeJkQcXU';\n    const { hexMagic, encryptedArray } = await encryptMultiple(\n      [BODY, DATA, IPFS_DIRECTORY_HASH],\n      'jota, pasame la sal'\n    );\n    try {\n      await decryptMultiple(encryptedArray, hexMagic, 'jota, pasame el salero');\n    } catch (err) {\n      expect(err.code).to.equal('WRONG_PASSWORD');\n    }\n  });\n});\n"],"file":"encryption.test.js"}
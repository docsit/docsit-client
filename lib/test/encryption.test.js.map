{"version":3,"sources":["../../src/test/encryption.test.js"],"names":["describe","it","HEX_STRING","arrayBuffer","to","eql","Uint8Array","ARRAY","hexString","equal","STRING","array","length","i","charCodeAt","string","PASSWORD","HEX_MAGIC","ENCRYPTED_BODY","ENCRYPTED_DATA","ENCRYPTED_IPFS_DICRECTORY_HASH","response","JSON","stringify","hola","BODY","DATA","IPFS_DIRECTORY_HASH","hexMagic","encryptedArray","body","data","ipfsDirectoryHash","err","code"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\n\nimport {\n  hexStringToBuffer,\n  bufferToHexString,\n  utf8StringToArray,\n  arrayToUtf8String,\n  encryptMultiple,\n  decryptMultiple,\n} from '../encryption';\n\ndescribe('Describe encryption module', () => {\n  it('correctly converts an 0 hex string to an array', async () => {\n    const HEX_STRING = '00000000000000000000000000000000';\n    const arrayBuffer = hexStringToBuffer(HEX_STRING);\n    expect(arrayBuffer).to.eql(new Uint8Array(16));\n  });\n\n  it('correctly converts a filled hex string to an array', async () => {\n    const HEX_STRING = 'cbf3ebc2bf3f10480a47bdd51a544d1a';\n    const arrayBuffer = hexStringToBuffer(HEX_STRING);\n    expect(arrayBuffer).to.eql(\n      new Uint8Array([203, 243, 235, 194, 191, 63, 16, 72, 10, 71, 189, 213, 26, 84, 77, 26])\n    );\n  });\n\n  it('correctly converts empty array to hex string', async () => {\n    const ARRAY = new Uint8Array(16);\n    const hexString = bufferToHexString(ARRAY);\n    expect(hexString).to.equal('00000000000000000000000000000000');\n  });\n\n  it('correctly converts a filled array to hex string', async () => {\n    const ARRAY = new Uint8Array([\n      203,\n      243,\n      235,\n      194,\n      191,\n      63,\n      16,\n      72,\n      10,\n      71,\n      189,\n      213,\n      26,\n      84,\n      77,\n      26,\n    ]);\n    const hexString = bufferToHexString(ARRAY);\n    expect(hexString).to.equal('cbf3ebc2bf3f10480a47bdd51a544d1a');\n  });\n\n  it('correctly converts a utf8 string to an array', async () => {\n    const STRING = 'hola:jota';\n    const array = utf8StringToArray(STRING);\n    expect(array.length).to.equal(STRING.length);\n    for (let i = 0; i < STRING.length; i += 1) {\n      expect(array[i]).to.equal(STRING.charCodeAt(i));\n    }\n  });\n\n  it('correctly converts an array to a utf8 string', async () => {\n    const STRING = 'hola:jota';\n    const array = new Uint8Array(STRING.length);\n    for (let i = 0; i < STRING.length; i += 1) {\n      array[i] = STRING.charCodeAt(i);\n    }\n    const string = arrayToUtf8String(array);\n    expect(string).to.equal(STRING);\n  });\n\n  it('correctly decrypts multiple string with the correct password', async () => {\n    const PASSWORD = 'jota, pasame la sal';\n    const HEX_MAGIC = '1fae168d77f474896bae8537257dddfb';\n    const ENCRYPTED_BODY = 'aae515ea4bcfb574a549a5340f23829a';\n    const ENCRYPTED_DATA = 'e5f095d3645fdb68b27952d84b76a6aa';\n    const ENCRYPTED_IPFS_DICRECTORY_HASH =\n      '23388186f1915d1635faa41c4fb255e5512b784bf1fb171dc6497719f4703a22623963fd51c7b743a8a1e2f136c57a34';\n    const response = await decryptMultiple(\n      [ENCRYPTED_BODY, ENCRYPTED_DATA, ENCRYPTED_IPFS_DICRECTORY_HASH],\n      HEX_MAGIC,\n      PASSWORD\n    );\n    expect(response).to.eql([\n      '# Title',\n      JSON.stringify({\n        hola: 'jota',\n      }),\n      'QmT4n2a261NS1ekg6zfxhYGuojCQCkpQGhP8LPSeJkQcXU',\n    ]);\n  });\n\n  it('correctly encrypts and then decrypts multiple strings', async () => {\n    const PASSWORD = 'jota, pasame la sal';\n    const BODY = '# Title';\n    const DATA = JSON.stringify({\n      hola: 'jota',\n    });\n    const IPFS_DIRECTORY_HASH = 'QmT4n2a261NS1ekg6zfxhYGuojCQCkpQGhP8LPSeJkQcXU';\n    const { hexMagic, encryptedArray } = await encryptMultiple(\n      [BODY, DATA, IPFS_DIRECTORY_HASH],\n      PASSWORD\n    );\n    const [body, data, ipfsDirectoryHash] = await decryptMultiple(\n      encryptedArray,\n      hexMagic,\n      PASSWORD\n    );\n    expect(body).to.equal(BODY);\n    expect(data).to.equal(DATA);\n    expect(ipfsDirectoryHash).to.equal(IPFS_DIRECTORY_HASH);\n  });\n\n  it('throws an error if multiple string are decrypted with invalid password', async () => {\n    const BODY = '# Title';\n    const DATA = JSON.stringify({\n      hola: 'jota',\n    });\n    const IPFS_DIRECTORY_HASH = 'QmT4n2a261NS1ekg6zfxhYGuojCQCkpQGhP8LPSeJkQcXU';\n    const { hexMagic, encryptedArray } = await encryptMultiple(\n      [BODY, DATA, IPFS_DIRECTORY_HASH],\n      'jota, pasame la sal'\n    );\n    try {\n      await decryptMultiple(encryptedArray, hexMagic, 'jota, pasame el salero');\n    } catch (err) {\n      expect(err.code).to.equal('WRONG_PASSWORD');\n    }\n  });\n});\n"],"file":"encryption.test.js"}
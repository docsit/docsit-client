{"version":3,"sources":["../src/documents.js"],"names":["stripHex","hex","replace","parseOrganizationRawObject","rawObject","id","name","documentIds","created","map","documentId","Date","parseDocumentRawObject","organizationId","magic","body","data","ipfsDirectoryHash","pinned","JSON","parse","getOrganizationById","contract","response","methods","call","err","console","error","CustomError","getDocumentById","getDocument","ipfsClient","options","finalOptions","organizationDetails","attachmentInformation","attachedFiles","wrongPasswordAlert","rawDocumentData","requestPassword","password","e","documentData","organization","attachmentsData","attachments","promiseArray","attachment","content","hash","Promise","all","encryptDocumentData","encryptedArray","encrypt","getAttachment","cid","then","file","generateDocument","encrypted","directory","Uint8Array","Error"],"mappings":"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","sourcesContent":["import CustomError from './custom-error';\nimport { hexToArrayBuffer, decryptMultiple, encryptMultiple } from './encryption';\nimport { listFilesInDirectory, getFile, saveFilesInDirectory } from './files';\n\nconst stripHex = hex => hex.replace(/^(0x)/, '');\n\nconst parseOrganizationRawObject = rawObject => {\n  const { id, name, documentIds, created } = rawObject;\n  return {\n    id: id.replace(/^(0x)/, ''),\n    name,\n    documentIds: documentIds.map(documentId => documentId.replace(/^(0x)/, '')),\n    created: new Date(created * 1000),\n  };\n};\n\nconst parseDocumentRawObject = rawObject => {\n  const { id, organizationId, magic, body, data, ipfsDirectoryHash, pinned, created } = rawObject;\n  return {\n    id: stripHex(id),\n    organizationId: stripHex(organizationId),\n    magic: stripHex(magic),\n    body,\n    data: JSON.parse(data),\n    ipfsDirectoryHash,\n    pinned,\n    created: new Date(created * 1000),\n  };\n};\n\nconst getOrganizationById = async (contract, organizationId) => {\n  try {\n    const response = await contract.methods.getOrganizationById(`0x${organizationId}`).call();\n    return parseOrganizationRawObject(response);\n  } catch (err) {\n    console.error(err);\n    throw new CustomError('Organization not found', 'NONEXISTENT_ORGANIZATION');\n  }\n};\n\nconst getDocumentById = async (contract, documentId) => {\n  try {\n    const response = await contract.methods.getDocumentById(`0x${documentId}`).call();\n    return parseDocumentRawObject(response);\n  } catch (err) {\n    console.error(err);\n    throw new CustomError('Document not found', 'NONEXISTENT_DOCUMENT');\n  }\n};\n\nexport const getDocument = async (contract, ipfsClient, id, options = {}) => {\n  const finalOptions = {\n    organizationDetails: false,\n    attachmentInformation: false,\n    attachedFiles: false,\n    // requestPassword: () => {},\n    wrongPasswordAlert: () => {},\n    ...options,\n  };\n\n  let rawDocumentData;\n  try {\n    rawDocumentData = await contract.methods.getDocumentById(`0x${id}`).call();\n  } catch (err) {\n    throw new CustomError('Document does not exist', 'NONEXISTENT_DOCUMENT');\n  }\n\n  if (rawDocumentData.magic !== '0x00000000000000000000000000000000') {\n    if (typeof finalOptions.requestPassword !== 'function')\n      throw new CustomError('Document is encrypted and requirePassword function was not provided');\n    while (true) {\n      const password = finalOptions.requestPassword();\n      try {\n        const [body, data, ipfsDirectoryHash] = decryptMultiple(\n          [rawDocumentData.body, rawDocumentData.data, rawDocumentData.ipfsDirectoryHash],\n          stripHex(rawDocumentData.magic),\n          password\n        );\n        rawDocumentData.body = body;\n        rawDocumentData.data = data;\n        rawDocumentData.ipfsDirectoryHash = ipfsDirectoryHash;\n      } catch (e) {\n        finalOptions.wrongPasswordAlert();\n      }\n    }\n  }\n\n  const documentData = parseDocumentRawObject(rawDocumentData);\n\n  if (finalOptions.organizationDetails) {\n    documentData.organization = await getOrganizationById(contract, documentData.organizationId);\n  }\n  if (finalOptions.attachmentInformation || finalOptions.attachedFiles) {\n    const attachmentsData = await listFilesInDirectory(ipfsClient, documentData.ipfsDirectoryHash);\n    documentData.attachments = attachmentsData;\n    if (finalOptions.attachedFiles) {\n      const promiseArray = attachmentsData.map(async attachment => {\n        const { content } = await getFile(ipfsClient, attachment.hash);\n        return {\n          ...attachment,\n          content,\n        };\n      });\n      documentData.attachments = await Promise.all(promiseArray);\n    }\n  }\n  return documentData;\n};\n\nexport const encryptDocumentData = (documentData, password) => {\n  const {\n    magic,\n    encryptedArray: [body, data, ipfsDirectoryHash],\n  } = encrypt([documentData.body, documentData.data, documentData.ipfsDirectoryHash], password);\n  return {\n    ...documentData,\n    magic,\n    body,\n    data,\n    ipfsDirectoryHash,\n  };\n};\n\nexport const getAttachment = (ipfsClient, cid) =>\n  getFile(ipfsClient, cid).then(file => file.content);\n\nexport const generateDocument = async (contract, ipfsClient, body, data, attachments, options) => {\n  const finalOptions = {\n    encrypted: false,\n    // password: '',\n    ...options,\n  };\n  const {\n    directory: { hash: ipfsDirectoryHash },\n  } = saveFilesInDirectory(ipfsClient, attachments);\n  let documentData = {\n    encrypted: finalOptions.encrypted,\n    data,\n    body,\n    ipfsDirectoryHash,\n  };\n  if (finalOptions.encrypted) {\n    documentData = encryptDocumentData(documentData);\n  } else {\n    documentData.magic = Uint8Array(16);\n  }\n  throw new Error('This feature is not implemented yet');\n};\n"],"file":"documents.js"}
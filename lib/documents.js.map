{"version":3,"sources":["../src/documents.js"],"names":["parseOrganizationRawObject","rawObject","id","name","documentIds","created","replace","map","documentId","Date","parseDocumentRawObject","organizationId","encrypted","magic","body","data","ipfsDirectoryHash","pinned","JSON","parse","getOrganizationById","contract","response","methods","call","err","console","error","Error","getDocumentById","getDocument","ipfsClient","options","finalOptions","organizationDetails","attachmentInformation","attachedFiles","documentData","organization","attachmentsData","attachments","promiseArray","attachment","content","hash","Promise","all","decryptDocumentData","password","decrypt","encryptDocumentData","encryptedArray","encrypt","getAttachment","cid","then","file","issueDocument","directory","Uint8Array"],"mappings":"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","sourcesContent":["import { hexToArrayBuffer, decryptMultiple, encryptMultiple } from './encryption';\nimport { listFilesInDirectory, getFile, saveFilesInDirectory } from './files';\n\nconst parseOrganizationRawObject = rawObject => {\n  const { id, name, documentIds, created } = rawObject;\n  return {\n    id: id.replace(/^(0x)/, ''),\n    name,\n    documentIds: documentIds.map(documentId => documentId.replace(/^(0x)/, '')),\n    created: new Date(created * 1000),\n  };\n};\n\nconst parseDocumentRawObject = rawObject => {\n  const {\n    id,\n    organizationId,\n    encrypted,\n    magic,\n    body,\n    data,\n    ipfsDirectoryHash,\n    pinned,\n    created,\n  } = rawObject;\n  return {\n    id: id.replace(/^(0x)/, ''),\n    organizationId: organizationId.replace(/^(0x)/, ''),\n    encrypted,\n    magic: magic.replace(/^(0x)/, ''),\n    body,\n    data: JSON.parse(data),\n    ipfsDirectoryHash,\n    pinned,\n    created: new Date(created * 1000),\n  };\n};\n\nconst getOrganizationById = async (contract, organizationId) => {\n  try {\n    const response = await contract.methods.getOrganizationById(`0x${organizationId}`).call();\n    return parseOrganizationRawObject(response);\n  } catch (err) {\n    console.error(err);\n    throw new Error('Organization not found.');\n  }\n};\n\nconst getDocumentById = async (contract, documentId) => {\n  try {\n    const response = await contract.methods.getDocumentById(`0x${documentId}`).call();\n    return parseDocumentRawObject(response);\n  } catch (err) {\n    console.error(err);\n    throw new Error('Document not found.');\n  }\n};\n\nexport const getDocument = async (contract, ipfsClient, id, options = {}) => {\n  const finalOptions = {\n    organizationDetails: false,\n    attachmentInformation: false,\n    attachedFiles: false,\n    ...options,\n  };\n  const documentData = await getDocumentById(contract, id);\n  if (finalOptions.organizationDetails) {\n    documentData.organization = await getOrganizationById(contract, documentData.organizationId);\n  }\n  if (finalOptions.attachmentInformation || finalOptions.attachedFiles) {\n    const attachmentsData = await listFilesInDirectory(ipfsClient, documentData.ipfsDirectoryHash);\n    documentData.attachments = attachmentsData;\n    if (finalOptions.attachedFiles) {\n      const promiseArray = attachmentsData.map(async attachment => {\n        const { content } = await getFile(ipfsClient, attachment.hash);\n        return {\n          ...attachment,\n          content,\n        };\n      });\n      documentData.attachments = await Promise.all(promiseArray);\n    }\n  }\n  return documentData;\n};\n\nexport const decryptDocumentData = (documentData, password) => {\n  const magic = hexToArrayBuffer(documentData.magic);\n  const [body, data, ipfsDirectoryHash] = decrypt(\n    [documentData.body, documentData.data, documentData.ipfsDirectoryHash],\n    magic,\n    password\n  );\n  try {\n    return {\n      ...documentData,\n      body,\n      data: JSON.parse(data),\n      ipfsDirectoryHash,\n    };\n  } catch (err) {\n    throw new Error('Wrong password.');\n  }\n};\n\nexport const encryptDocumentData = (documentData, password) => {\n  const {\n    magic,\n    encryptedArray: [body, data, ipfsDirectoryHash],\n  } = encrypt([documentData.body, documentData.data, documentData.ipfsDirectoryHash], password);\n  return {\n    ...documentData,\n    magic,\n    body,\n    data,\n    ipfsDirectoryHash,\n  };\n};\n\nexport const getAttachment = (ipfsClient, cid) =>\n  getFile(ipfsClient, cid).then(file => file.content);\n\nexport const issueDocument = async (contract, ipfsClient, body, data, attachments, options) => {\n  const finalOptions = {\n    encrypted: false,\n    password: '',\n    ...options,\n  };\n  const {\n    directory: { hash: ipfsDirectoryHash },\n  } = saveFilesInDirectory(ipfsClient, attachments);\n  let documentData = {\n    encrypted: finalOptions.encrypted,\n    data,\n    body,\n    ipfsDirectoryHash,\n  };\n  if (finalOptions.encrypted) {\n    documentData = encryptDocumentData(documentData);\n  } else {\n    documentData.magic = Uint8Array(16);\n  }\n  throw new Error('This feature is not implemented yet');\n};\n"],"file":"documents.js"}